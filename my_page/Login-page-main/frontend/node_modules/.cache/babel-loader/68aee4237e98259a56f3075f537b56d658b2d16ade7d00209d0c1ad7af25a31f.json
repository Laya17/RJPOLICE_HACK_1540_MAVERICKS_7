{"ast":null,"code":"function Validation(values) {\n  let error = {};\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/;\n\n  // Check if the 'name' field is empty\n  if (values.name === \"\") {\n    error.name = \"Name should not be empty\";\n  } else {\n    error.name = \"\"; // No error if not empty\n  }\n\n  // Check if the 'email' field is empty and matches the email pattern\n  if (values.email === \"\") {\n    error.email = \"Email should not be empty\";\n  } else if (!email_pattern.test(values.email)) {\n    error.email = \"Email format is incorrect\";\n  } else {\n    error.email = \"\"; // No error if not empty and format is correct\n  }\n\n  // Check if the 'password' field is empty and matches the password pattern\n  if (values.password === \"\") {\n    error.password = \"Password should not be empty\";\n  } else if (!password_pattern.test(values.password)) {\n    error.password = \"Password format is incorrect\";\n  } else {\n    error.password = \"\"; // No error if not empty and format is correct\n  }\n\n  // Check if the 'age' field is empty\n  if (values.age === \"\") {\n    error.age = \"Age should not be empty\";\n  } else {\n    error.age = \"\"; // No error if not empty\n  }\n\n  // Check if the 'address' field is empty\n  if (values.address === \"\") {\n    error.address = \"Address should not be empty\";\n  } else {\n    error.address = \"\"; // No error if not empty\n  }\n\n  return error; // Return the error object with validation results\n}\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["Validation","values","error","email_pattern","password_pattern","name","email","test","password","age","address","_c","$RefreshReg$"],"sources":["C:/Users/laya_/Downloads/my_page/Login-page-main/frontend/src/SignupValidation.js"],"sourcesContent":["function Validation(values) {\r\n    let error = {};\r\n    const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/;\r\n\r\n    // Check if the 'name' field is empty\r\n    if (values.name === \"\") {\r\n        error.name = \"Name should not be empty\";\r\n    } else {\r\n        error.name = \"\"; // No error if not empty\r\n    }\r\n\r\n    // Check if the 'email' field is empty and matches the email pattern\r\n    if (values.email === \"\") {\r\n        error.email = \"Email should not be empty\";\r\n    } else if (!email_pattern.test(values.email)) {\r\n        error.email = \"Email format is incorrect\";\r\n    } else {\r\n        error.email = \"\"; // No error if not empty and format is correct\r\n    }\r\n\r\n    // Check if the 'password' field is empty and matches the password pattern\r\n    if (values.password === \"\") {\r\n        error.password = \"Password should not be empty\";\r\n    } else if (!password_pattern.test(values.password)) {\r\n        error.password = \"Password format is incorrect\";\r\n    } else {\r\n        error.password = \"\"; // No error if not empty and format is correct\r\n    }\r\n\r\n    // Check if the 'age' field is empty\r\n    if (values.age === \"\") {\r\n        error.age = \"Age should not be empty\";\r\n    } else {\r\n        error.age = \"\"; // No error if not empty\r\n    }\r\n\r\n    // Check if the 'address' field is empty\r\n    if (values.address === \"\") {\r\n        error.address = \"Address should not be empty\";\r\n    } else {\r\n        error.address = \"\"; // No error if not empty\r\n    }\r\n\r\n    return error; // Return the error object with validation results\r\n}\r\n\r\nexport default Validation;\r\n"],"mappings":"AAAA,SAASA,UAAUA,CAACC,MAAM,EAAE;EACxB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,MAAMC,aAAa,GAAG,4BAA4B;EAClD,MAAMC,gBAAgB,GAAG,iDAAiD;;EAE1E;EACA,IAAIH,MAAM,CAACI,IAAI,KAAK,EAAE,EAAE;IACpBH,KAAK,CAACG,IAAI,GAAG,0BAA0B;EAC3C,CAAC,MAAM;IACHH,KAAK,CAACG,IAAI,GAAG,EAAE,CAAC,CAAC;EACrB;;EAEA;EACA,IAAIJ,MAAM,CAACK,KAAK,KAAK,EAAE,EAAE;IACrBJ,KAAK,CAACI,KAAK,GAAG,2BAA2B;EAC7C,CAAC,MAAM,IAAI,CAACH,aAAa,CAACI,IAAI,CAACN,MAAM,CAACK,KAAK,CAAC,EAAE;IAC1CJ,KAAK,CAACI,KAAK,GAAG,2BAA2B;EAC7C,CAAC,MAAM;IACHJ,KAAK,CAACI,KAAK,GAAG,EAAE,CAAC,CAAC;EACtB;;EAEA;EACA,IAAIL,MAAM,CAACO,QAAQ,KAAK,EAAE,EAAE;IACxBN,KAAK,CAACM,QAAQ,GAAG,8BAA8B;EACnD,CAAC,MAAM,IAAI,CAACJ,gBAAgB,CAACG,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,EAAE;IAChDN,KAAK,CAACM,QAAQ,GAAG,8BAA8B;EACnD,CAAC,MAAM;IACHN,KAAK,CAACM,QAAQ,GAAG,EAAE,CAAC,CAAC;EACzB;;EAEA;EACA,IAAIP,MAAM,CAACQ,GAAG,KAAK,EAAE,EAAE;IACnBP,KAAK,CAACO,GAAG,GAAG,yBAAyB;EACzC,CAAC,MAAM;IACHP,KAAK,CAACO,GAAG,GAAG,EAAE,CAAC,CAAC;EACpB;;EAEA;EACA,IAAIR,MAAM,CAACS,OAAO,KAAK,EAAE,EAAE;IACvBR,KAAK,CAACQ,OAAO,GAAG,6BAA6B;EACjD,CAAC,MAAM;IACHR,KAAK,CAACQ,OAAO,GAAG,EAAE,CAAC,CAAC;EACxB;;EAEA,OAAOR,KAAK,CAAC,CAAC;AAClB;AAACS,EAAA,GA7CQX,UAAU;AA+CnB,eAAeA,UAAU;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}